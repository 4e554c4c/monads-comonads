name: Deploy documentation to gh pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  AGDA: agda --auto-inline -Werror -i. -i src/
  AGDA_HTML_DIR: html

  AGDA_COMMIT: tags/v2.6.4.1
  STDLIB_VERSION: '2.0'
  CATEGORIES_VERSION: '0.2.0'

  GHC_VERSION: 8.10.7
  CABAL_VERSION: 3.6.2.0
  CABAL_INSTALL: cabal install --overwrite-policy=always --ghc-options='-O1 +RTS -M6G -RTS' --installdir $HOME/.cabal/bin


jobs:
  publish-docs:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

########################################################################
## SETTINGS
########################################################################

      # The script won't be able to find Agda if we don't tell it to look at the
      # content of ~/.cabal/bin
      - name: Put cabal programs in PATH
        run: echo "$HOME/.cabal/bin" >> $GITHUB_PATH

########################################################################
## CACHING
########################################################################

      # This caching step allows us to save a lot of building time by only
      # downloading ghc and cabal and rebuilding Agda if absolutely necessary
      # i.e. if we change either the version of Agda, ghc, or cabal that we want
      # to use for the build.
      - name: Open cache
        uses: actions/cache@v3
        id: cache-everything
        with:
          path: |
            ~/.cabal/packages
            ~/.cabal/store
            ~/.cabal/bin
            ~/.cabal/share
            ~/.agda-build-cache
          key: ${{ runner.os }}-${{ env.GHC_VERSION }}-${{ env.CABAL_VERSION }}-${{ env.AGDA_COMMIT }}

      # If a build cache exists, use it, but don't fail if
      # there isn't.
      - name: Unpack build cache
        if: steps.cache-everything.outputs.cache-hit == 'true'
        run: |
          cp -rpv ~/.agda-build-cache/monads-comonads ./_build/ || exit 0

########################################################################
## INSTALLATION STEPS
########################################################################

      - name: Install ghc and cabal
        if: steps.cache-everything.outputs.cache-hit != 'true'
        uses: haskell-actions/setup@v2
        with:
          ghc-version: ${{ env.GHC_VERSION }}
          cabal-version: ${{ env.CABAL_VERSION }}

      - name: Cabal update
        if: steps.cache-everything.outputs.cache-hit != 'true'
        run: cabal update

      - name: Download and install Agda from github
        if: steps.cache-everything.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/agda/agda
          cd agda
          git checkout ${{ env.AGDA_COMMIT }}
          mkdir -p doc
          touch doc/user-manual.pdf
          # make sure it exists
          mkdir -p $HOME/.cabal/bin
          ${{ env.CABAL_INSTALL }}
          cd ..

      - name: Install stdlib
        run: |
          mkdir -p $HOME/.agda
          cd $HOME/.agda
          wget https://github.com/agda/agda-stdlib/archive/v${{ env.STDLIB_VERSION }}.tar.gz
          tar -xzvf v${{ env.STDLIB_VERSION }}.tar.gz
          mv agda-stdlib-${{ env.STDLIB_VERSION }} agda-stdlib
          echo "~/.agda/agda-stdlib/standard-library.agda-lib" > libraries
          cd -

      # If a build cache exists for agda-stdlib, use it, but don't fail if there
      # isn't.
      - name: Unpack agda-stdlib build cache
        if: steps.cache-everything.outputs.cache-hit == 'true'
        run: |
          cp -rpv ~/.agda-build-cache/agda-stdlib ~/.agda/agda-stdlib/_build/ || exit 0

      - name: Install agda-categories
        run: |
          cd $HOME/.agda
          wget https://github.com/agda/agda-categories/archive/v${{ env.CATEGORIES_VERSION }}.tar.gz
          tar -xzvf v${{ env.CATEGORIES_VERSION }}.tar.gz
          mv agda-categories-${{ env.CATEGORIES_VERSION }} agda-categories
          echo "~/.agda/agda-categories/agda-categories.agda-lib" >> libraries
          cd -



      - name: Test
        run: |
          cp ci/* .
          ./everything.sh
          ${{ env.AGDA }} Everything.agda
          ${{ env.AGDA }} index.agda

      - name: Generate HTML
        run: |
          ${{ env.AGDA }} --html --html-dir ${{ env.AGDA_HTML_DIR }} index.agda

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload artifacts
        uses: actions/upload-pages-artifact@v2
        with:
          # Upload docs
          path: ${{ env.AGDA_HTML_DIR }}

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
